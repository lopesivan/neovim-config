# lua.snippets - Snippets for lua file type

global !p
linelen = 78

def floor(i):
	if int(i) == i:
		return int(i)
	elif i > 0:
		return int(i)
	elif i < 0:
		return int(i) - 1

def ceil(i):
	if int(i) == i:
		return int(i)
	elif i > 0:
		return int(i) + 1
	elif i < 0:
		return int(i)
endglobal

snippet _skeleton "esqueleto 1" b
-- programa em lua
$0
endsnippet

snippet _after_plugin "Plugin Lua (after)" b
-- `!v expand('%')` - `!v expand('%<')`
-- Maintainer: Ivan Lopes
-- ~/.config/nvim/after/plugin

$0

-- vim: fdm=marker:sw=4:sts=4:et
endsnippet

snippet _ftdetect "Lua Script file type detect" b
-- `!v expand('%')` - `!v expand('%<')`
-- Maintainer: Ivan Lopes
-- ~/.config/nvim/ftdetect

vim.api.nvim_create_autocmd({ "BufRead", "BufNewFile" }, {
-- group = group,
pattern  = { "*.`!v expand("%:t:r")`" },
callback = function()
   vim.bo.filetype = "`!v expand("%:t:r")`"
end,
})
-- vim: fdm=marker:sw=4:sts=4:et
endsnippet

snippet _lua_tj "Plugin Lua tj" b
-- `!v expand('%')` - `!v expand('%<')`
-- Maintainer: Ivan Lopes
-- ~/.config/nvim/lua/tj

$0

-- vim: fdm=marker nowrap sw=4 sts=4 et
endsnippet

snippet oo "Lua OO" b
Dog = {}                                   -- 1.

function Dog:new()                         -- 2.
  self.__index = self                      -- 4.
  local newObj = {sound = 'woof'}          -- 3.
  return setmetatable(newObj, self)        -- 5.
end

function Dog:makeSound()                   -- 6.
  print('I say ' .. self.sound)
end

mrDog = Dog:new()                          -- 7.
mrDog:makeSound()  -- 'I say woof'         -- 8.


local caetano = Dog:new()
caetano:makeSound()
endsnippet



snippet nuca "Slide Header" b
---
title: title
author: `git config --get user.name` (`git config --get user.site`)
date: `!v strftime('%Y-%m-%d')`
extensions:
  - image_ueberzug
  - render
---

# Slide 1

Some text

---

# Slide 2

More text
$0
endsnippet

snippet oo2 "Lua OO2" b
local Class = {}

function Class.new(factor)
    local instance = {factor = factor}

    return setmetatable(instance, {__index = Class})
end

function Class:multiply(n)
    return self.factor * n
end

local m = Class.new(5)
print(m:multiply(6)) --> 30
endsnippet


snippet premake "premak5" b
-- premake5.lua
workspace "HelloWorld"
   configurations { "Debug", "Release" }

project "HelloWorld"
   kind "ConsoleApp"
   language "C"
   targetdir "bin/%{cfg.buildcfg}"

   files { "**.h", "**.c" }

   filter "configurations:Debug"
      defines { "DEBUG" }
      symbols "On"

   filter "configurations:Release"
      defines { "NDEBUG" }
      optimize "On"
endsnippet

#############################################################################
#############################################################################
#############################################################################

#################################
# Snippets for the Lua language #
#################################
snippet #! "#!/usr/bin/env lua" b
#!/usr/bin/env lua
$0
endsnippet

snippet assert "Assertion" b
assert(${1:condition}`!p
if t[2]:
	snip.rv = ", "
else:
	snip.rv = ""
`${2:msg})
endsnippet

snippet !fun(ction)?! "New function" br
function ${1:new_function}(${2:args})
	$0
end
endsnippet

snippet forp "pair for loop" b
for ${1:name},${2:val} in pairs(${3:table_name}) do
	$0
end
endsnippet

snippet fori "ipair for foop" b
for ${1:idx},${2:val} in ipairs(${3:table_name}) do
	$0
end
endsnippet

snippet for "numeric for loop" b
for ${1:i}=${2:first},${3:last}${4/^..*/(?0:,:)/}${4:step} do
	$0
end
endsnippet

snippet do "do block"
do
	$0
end
endsnippet

snippet repeat "repeat loop" b
repeat
	$1
until $0
endsnippet

snippet while "while loop" b
while $1 do
	$0
end
endsnippet

snippet if "if statement" b
if $1 then
	$0
end
endsnippet

snippet ife "if/else statement" b
if $1 then
	$2
else
	$0
end
endsnippet

snippet eif "if/elseif statement" b
if $1 then
	$2
elseif $3 then
	$0
end
endsnippet

snippet eife "if/elseif/else statement" b
if $1 then
	$2
elseif $3 then
	$4
else
	$0
end
endsnippet

snippet pcall "pcall statement" b
local ok, err = pcall(${1:your_function})
if not ok then
	handler(${2:ok, err})
${3:else
	success(${4:ok, err})
}end
endsnippet

snippet local "local x = 1"
local ${1:x} = ${0:1}
endsnippet

snippet fmt "string.format()"
string.format("${0:`!p snip.rv = snip.v.text or "%s"`}", ${1:`!p snip.rv = ','*(snip.v.text.count('%')-1)`})$2
endsnippet
#############################################################################
#############################################################################
#############################################################################
#############################################################################

snippet "cmt (.*)" "Comment with description." rbw
--[[ ${1:`!p snip.rv = match.group(1)`}
${2:${VISUAL:TODO}}
]]$0
endsnippet

snippet line "Comment Using Line" bw
--`!p snip.rv = '-' * floor((linelen - 8 - len(t[1])) / 2)`\ ${1} /`!p snip.rv = '-' * ceil((linelen - 8 - len(t[1])) / 2)`--
$0
endsnippet

snippet Box "Comment Using Big Box" bw
`!p snip.rv = '-' * (linelen-4)`
`!p snip.rv = '--' + ' ' * floor((linelen - 8 - len(t[1])) / 2)`\ ${1} /`!p snip.rv = ' ' * ceil((linelen - 8 - len(t[1])) / 2) + '--'`
`!p snip.rv = '-' * linelen`
$0
endsnippet

snippet box "Comment Using Small Box" bw
--`!p snip.rv = '-'  * (len(t[1]) + 2)`--
-- $1 --
--`!p snip.rv = '-'  * (len(t[1]) + 2)`--
$0
endsnippet

snippet func "function" b
function ${1}(${2})
    ${3:${VISUAL}}
end$0
endsnippet

snippet for "for loop" bA
for ${1:condition} do
    ${2}
end$0
endsnippet

snippet if "if" bA
if ${1:condition} then
    ${2}
end$0
endsnippet

snippet map "mapping" bw
\{'${1:mod}', '${2:keys}', '${3:contents}'\},$0
endsnippet


# snippet i "if err != nil" "re.match(`^\s+[^=]*err\s*:?=`, snip.buffer[snip.line-1])" be
# if err != nil {
#     $1
# }
# endsnippet

# vim:ft=snippets:
