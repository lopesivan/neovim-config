#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1365565333.465757
__CHEETAH_genTimestamp__ = 'Wed Apr 10 00:42:13 2013'
__CHEETAH_src__ = '../model/nameofprojectapp_h.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 00:38:50 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class nameofprojectapp_h(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(nameofprojectapp_h, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''#ifndef ''')
        _v = VFFSL(SL,"define_name",True) # u'${define_name}' on line 1, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${define_name}')) # from line 1, col 10.
        write(u'''
#define ''')
        _v = VFFSL(SL,"define_name",True) # u'${define_name}' on line 2, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${define_name}')) # from line 2, col 10.
        write(u'''

/*!
 * Includes
 */

////@begin includes
#include "wx/xrc/xmlres.h"
#include "wx/image.h"
//#include "MyWizard.h"
//#include "WizardPage.h"
//#include "WizardPage1.h"
////@end includes

/*!
 * ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 17, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 17, col 4.
        write(u''' class declaration
 */

class ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 20, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 20, col 7.
        write(u''': public wxApp
{
    DECLARE_CLASS( ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 22, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 22, col 20.
        write(u''' )
    DECLARE_EVENT_TABLE()

public:
    /// Constructor
    ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 27, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 27, col 5.
        write(u'''();

    void Init();

    /// Initialises the application
    virtual bool OnInit();

    /// Called on exit
    virtual int OnExit();

////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 37, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 37, col 12.
        write(u''' event handler declarations

////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 39, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 39, col 10.
        write(u''' event handler declarations

////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 41, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 41, col 12.
        write(u''' member function declarations

////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 43, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 43, col 10.
        write(u''' member function declarations

////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 45, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 45, col 12.
        write(u''' member variables
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 46, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 46, col 10.
        write(u''' member variables
};

/*!
 * Application instance declaration
 */

////@begin declare app
DECLARE_APP(''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 54, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 54, col 13.
        write(u''')
////@end declare app

#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_nameofprojectapp_h= 'respond'

## END CLASS DEFINITION

if not hasattr(nameofprojectapp_h, '_initCheetahAttributes'):
    templateAPIClass = getattr(nameofprojectapp_h, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(nameofprojectapp_h)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=nameofprojectapp_h()).run()


