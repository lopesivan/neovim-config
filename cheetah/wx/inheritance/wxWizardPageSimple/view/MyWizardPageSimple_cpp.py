#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1365564003.284644
__CHEETAH_genTimestamp__ = 'Wed Apr 10 00:20:03 2013'
__CHEETAH_src__ = '../model/MyWizardPageSimple_cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Apr  9 23:14:35 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class MyWizardPageSimple_cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(MyWizardPageSimple_cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "wx/imaglist.h"
////@end includes

#include "''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 12, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 12, col 12.
        write(u'''.h"

////@begin XPM images
////@end XPM images

/*
 * ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 18, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 18, col 4.
        write(u''' type definition
 */

IMPLEMENT_DYNAMIC_CLASS(''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 21, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 21, col 25.
        write(u''', wxWizardPageSimple)

/*
 * ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 24, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 24, col 4.
        write(u''' event table definition
 */

BEGIN_EVENT_TABLE(''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 27, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 27, col 19.
        write(u''', wxWizardPageSimple)

////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 29, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 29, col 12.
        write(u''' event table entries
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 30, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 30, col 10.
        write(u''' event table entries

END_EVENT_TABLE()

/*
 * ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 35, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 35, col 4.
        write(u''' constructors
 */

''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 38, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 38, col 1.
        write(u'''::''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 38, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 38, col 16.
        write(u'''()
{
\tInit();
}

''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 43, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 43, col 1.
        write(u'''::''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 43, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 43, col 16.
        write(u'''(wxWizard *parent)
{
\tInit();
\tCreate(parent);
}

/*
 * ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 50, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 50, col 4.
        write(u''' creator
 */

bool ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 53, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 53, col 6.
        write(u'''::Create(wxWizard *parent)
{
////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 55, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 55, col 12.
        write(u''' creation
\tCreateControls();
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 57, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 57, col 10.
        write(u''' creation
\treturn true;
}

/*
 * ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 62, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 62, col 4.
        write(u''' destructor
 */

''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 65, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 65, col 1.
        write(u'''::~''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 65, col 17
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 65, col 17.
        write(u'''()
{
////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 67, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 67, col 12.
        write(u''' destruction
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 68, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 68, col 10.
        write(u''' destruction
}

/*
 * Member initialisation
 */

void ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 75, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 75, col 6.
        write(u'''::Init()
{
////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 77, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 77, col 12.
        write(u''' member initialisation
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 78, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 78, col 10.
        write(u''' member initialisation
}

/*
 * Control creation for ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 82, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 82, col 25.
        write(u'''
 */

void ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 85, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 85, col 6.
        write(u'''::CreateControls()
{
////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 87, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 87, col 12.
        write(u''' content construction
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 88, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 88, col 10.
        write(u''' content construction

\t// Create custom windows not generated automatically here.
////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 91, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 91, col 12.
        write(u''' content initialisation
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 92, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 92, col 10.
        write(u''' content initialisation
}

/*
 * Should we show tooltips?
 */

bool ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 99, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 99, col 6.
        write(u'''::ShowToolTips()
{
\treturn true;
}

/*
 * Get bitmap resources
 */

wxBitmap ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 108, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 108, col 10.
        write(u'''::GetBitmapResource(const wxString &name)
{
\t// Bitmap retrieval
////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 111, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 111, col 12.
        write(u''' bitmap retrieval
\twxUnusedVar(name);
\treturn wxNullBitmap;
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 114, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 114, col 10.
        write(u''' bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 121, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 121, col 8.
        write(u'''::GetIconResource(const wxString &name)
{
\t// Icon retrieval
////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 124, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 124, col 12.
        write(u''' icon retrieval
\twxUnusedVar(name);
\treturn wxNullIcon;
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 127, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 127, col 10.
        write(u''' icon retrieval
}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_MyWizardPageSimple_cpp= 'respond'

## END CLASS DEFINITION

if not hasattr(MyWizardPageSimple_cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(MyWizardPageSimple_cpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(MyWizardPageSimple_cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=MyWizardPageSimple_cpp()).run()


