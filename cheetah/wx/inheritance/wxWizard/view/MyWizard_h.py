#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1365563805.90669
__CHEETAH_genTimestamp__ = 'Wed Apr 10 00:16:45 2013'
__CHEETAH_src__ = '../model/MyWizard_h.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Apr  9 22:50:39 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class MyWizard_h(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(MyWizard_h, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''#ifndef ''')
        _v = VFFSL(SL,"define_name",True) # u'${define_name}' on line 1, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${define_name}')) # from line 1, col 10.
        write(u'''
#define ''')
        _v = VFFSL(SL,"define_name",True) # u'${define_name}' on line 2, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${define_name}')) # from line 2, col 10.
        write(u'''

/*!
 * Includes
 */

////@begin includes
#include "wx/xrc/xmlres.h"
#include "wx/wizard.h"
////@end includes

/*!
 * Control identifiers
 */

////@begin control identifiers
#define ID_''')
        _v = VFFSL(SL,"class_name_upper",True) # u'${class_name_upper}' on line 18, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name_upper}')) # from line 18, col 13.
        write(u''' ''')
        _v = VFFSL(SL,"class_id",True) # u'${class_id}' on line 18, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'${class_id}')) # from line 18, col 33.
        write(u'''
#define SYMBOL_''')
        _v = VFFSL(SL,"class_name_upper",True) # u'${class_name_upper}' on line 19, col 17
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name_upper}')) # from line 19, col 17.
        write(u'''_IDNAME ID_''')
        _v = VFFSL(SL,"class_name_upper",True) # u'${class_name_upper}' on line 19, col 47
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name_upper}')) # from line 19, col 47.
        write(u'''
////@end control identifiers

/*!
 * ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 23, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 23, col 4.
        write(u''' class declaration
 */

class ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 26, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 26, col 7.
        write(u''': public wxWizard {
\tDECLARE_DYNAMIC_CLASS(''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 27, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 27, col 24.
        write(u''')
\tDECLARE_EVENT_TABLE()

public:
\t/// Constructors
\t''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 32, col 2
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 32, col 2.
        write(u'''();
\t''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 33, col 2
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 33, col 2.
        write(u'''(wxWindow *parent, wxWindowID id = SYMBOL_''')
        _v = VFFSL(SL,"class_name_upper",True) # u'${class_name_upper}' on line 33, col 57
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name_upper}')) # from line 33, col 57.
        write(u'''_IDNAME, const wxPoint &pos = wxDefaultPosition);

\t/// Creation
\tbool Create(wxWindow *parent, wxWindowID id = SYMBOL_''')
        _v = VFFSL(SL,"class_name_upper",True) # u'${class_name_upper}' on line 36, col 55
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name_upper}')) # from line 36, col 55.
        write(u'''_IDNAME, const wxPoint &pos = wxDefaultPosition);

\t/// Destructor
\t~''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 39, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 39, col 3.
        write(u'''();

\t/// Initialises member variables
\tvoid Init();

\t/// Creates the controls and sizers
\tvoid CreateControls();

////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 47, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 47, col 12.
        write(u''' event handler declarations

////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 49, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 49, col 10.
        write(u''' event handler declarations

////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 51, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 51, col 12.
        write(u''' member function declarations

\t/// Runs the wizard
\tbool Run();

\t/// Retrieves bitmap resources
\twxBitmap GetBitmapResource(const wxString &name);

\t/// Retrieves icon resources
\twxIcon GetIconResource(const wxString &name);
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 61, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 61, col 10.
        write(u''' member function declarations

\t/// Should we show tooltips?
\tstatic bool ShowToolTips();

////@begin ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 66, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 66, col 12.
        write(u''' member variables
////@end ''')
        _v = VFFSL(SL,"class_name",True) # u'${class_name}' on line 67, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 67, col 10.
        write(u''' member variables
};

#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_MyWizard_h= 'respond'

## END CLASS DEFINITION

if not hasattr(MyWizard_h, '_initCheetahAttributes'):
    templateAPIClass = getattr(MyWizard_h, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(MyWizard_h)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=MyWizard_h()).run()


