---
  project: "Widget"
  language: "java"
  gof: "Factory Method"
  description: >
    The abstract factory pattern provides a way to encapsulate a group of
    individual factories that have a common theme without specifying their
    concrete classes. In normal usage, the client software creates a
    concrete implementation of the abstract factory and then uses the generic
    interface of the factory to create the concrete objects that are part of
    the theme. The client doesn't know (or care) which concrete objects it
    gets from each of these internal factories, since it uses only the generic
    interfaces of their products. This pattern separates the details of
    implementation of a set of objects from their general usage and relies on
    object composition, as object creation is implemented in methods exposed
    in the factory interface.

  mode: 1

  types:
    - qt
    - motif

  creator:
    -
      abstract:
        -
          name: "widget"
          factoryMethod:
            -
              name: "factoryMethod"
              produto: "ProductName"
      concrete:
        -
          name:
          attributes:
          methods:

  products:
    -
      abstract:
        -
          name:
          attributes:
          methods:
      concrete:
        -
          name:
          attributes:
          methods:

