#encoding UTF-8
#compiler commentStartToken = '//'
// :Template docker-softsam [data]
#compiler reset
\# docker pull registry.local:5000/softsam/android-16:latest
PROJECTNAME    = MyAndroid
PROJECTPACKAGE = com.example.\$(shell echo \$(PROJECTNAME) | tr A-Z a-z)

CONTAINER_NAME = android

TAG           = latest
\# NAME          = softsam/android-16
\# NAME          = softsam/android-17
\# NAME          = softsam/android-19
\# NAME          = softsam/android-20
\# NAME          = softsam/android-21
\# NAME          = softsam/android-22
NAME          = softsam/android-23
MACHINENAME   = registry.local:5000/\$(NAME):\$(TAG)

HASH          = 39d40bb58aff5e132f9026a59287db1d
BLOB          = 4ee4cb6e6d3cdcd3f6f5d0254d2d154306f0880f
ENTRYPOINT    = wget https://gist.githubusercontent.com/lopesivan/\$(HASH)/raw/\$(BLOB)/entrypoint.sh
DOCKER        = docker
PORT          = -p 5555:5555 -p 5900:5900
ARCH          = "x86"
all: help

.PHONY: help
help:
	@printf "%s\n" "Useful targets:"
	@grep -E '^[a-zA-Z0-9_-]+:.*?\#\# .*\$\$' \$(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?\#\# "}; {printf "\033[36m  make %-15s\033[0m %s\n", \$\$1, \$\$2}'

suexec:
	git clone --branch v0.2 --depth 1 https://github.com/ncopa/su-exec.git && \
		cd su-exec && \
		git switch -c v0.2 && \
		make
entrypoint:
	@(cd su-exec; pwd; \$(ENTRYPOINT) )
	chmod +x su-exec/entrypoint.sh

.PHONY: init
init: suexec entrypoint \#\# config no-root

ps: \#\# Shows processes that are running or suspended
	\$(DOCKER) ps -a

.PHONY: status
status: \#\# Show Name, cpu and memory usage per machine
	\$(DOCKER) stats --all --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"

info:
	\$(DOCKER) inspect -f '{{ index .Config.Labels "build_version" }}' \$(MACHINENAME):\$(TAG)

pause:
	\$(DOCKER) \$@ \$(CONTAINER_NAME)
unpause:
	\$(DOCKER) \$@ \$(CONTAINER_NAME)

images:
	\$(DOCKER) images --format "{{.Repository}}:{{.Tag}}"| sort
ls:
	\$(DOCKER) images --format "{{.ID}}: {{.Repository}}"
size:
	\$(DOCKER) images --format "{{.Size}}\t: {{.Repository}}"
tags:
	\$(DOCKER) images --format "{{.Tag}}\t: {{.Repository}}"| sort -t ':' -k2 -n
net:
	\$(DOCKER) network ls
rm-network:
	\$(DOCKER) network ls| awk '\$\$2 !~ "(bridge|host|none)" {print "docker network rm " \$\$1}' | sed '1d'

.PHONY: rmi
rmi: \#\# remove images
	docker rmi \$(MACHINENAME)

rm-all:
	\$(DOCKER) ps -aq -f status=exited| xargs \$(DOCKER) rm

stop-all:
	\$(DOCKER) ps -aq -f status=running| xargs \$(DOCKER) stop

log:
	\$(DOCKER) logs -f \$(CONTAINER_NAME)

ip:
	\$(DOCKER) ps -q \
	| xargs \$(DOCKER) inspect --format '{{ .Name }}:{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'\
	| \sed 's/^.*://'

memory:
	\$(DOCKER) inspect `\$(DOCKER) ps -aq` | grep -i mem

fix:
	\$(DOCKER) images -q --filter "dangling=true"| xargs \$(DOCKER) rmi -f

.PHONY: stop
stop: \#\# turnoff container
	\$(DOCKER) stop \$(CONTAINER_NAME)

rm:
	\$(DOCKER) rm \$(CONTAINER_NAME)

.PHONY: up
up: \#\# run in banckground
	\$(DOCKER) run -d --privileged -v /dev/kvm:/dev/kvm \$(PORT) -e ANDROID_ARCH=\$(ARC)  --name \$(CONTAINER_NAME) \$(MACHINENAME)

.PHONY: exec
exec: \#\# connect with container
	\$(DOCKER) exec -it \$(CONTAINER_NAME) bash

.PHONY: run
run: \#\# run interactive
	\$(DOCKER) run -it \
		-e USER=`id -u -n` \
		-e GROUP=`id -g -n` \
		-e UID=`id -u` \
		-e GID=`id -g` \
		-w /home/`id -u -n` \
		-v `pwd`/host:/home/`id -u -n` \
		-v `pwd`/su-exec/:/opt/bin \
		-v/dev/kvm:/dev/kvm \
		-p 5555:5555 \
		-p 5900:5900 \
		-e ANDROID_ARCH=x86 \
		--name \$(CONTAINER_NAME) --rm \$(MACHINENAME) \
		/opt/bin/entrypoint.sh bash

.PHONY: emulator
emulator: \#\# open emulator
	vncviewer UseLocalCursor localhost:5900

\# adb usb
\# adb tcpip 5555
\# adb connect 192.168.10.1:5555
.PHONY: conect
conect: \#\# adb connect with emulator
	adb connect \$\$(docker ps -q| xargs docker inspect --format '{{ .Name }}:{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'| sed 's=.*:=='):5555

.PHONY: unlock
unlock: \#\# unlock emulator
	adb shell input keyevent 82

.PHONY: back
back: \#\# back emulator
	adb shell input keyevent KEYCODE_BACK

.PHONY: enter
enter: \#\# press enter on emulator
	adb shell input keyevent 66 \#Pressing Enter

.PHONY: android
android: \#\# android --help
	\$(DOCKER) run -it \
		-e USER=`id -u -n` \
		-e GROUP=`id -g -n` \
		-e UID=`id -u` \
		-e GID=`id -g` \
		-w /home/`id -u -n` \
		-v `pwd`/host:/home/`id -u -n` \
		-v `pwd`/su-exec/:/opt/bin \
		-e ANDROID_ARCH=x86 \
		--name \$(CONTAINER_NAME) --rm \$(MACHINENAME) \
		/opt/bin/entrypoint.sh \
		/opt/android-sdk-linux/tools/android --help


.PHONY: projectapp
projectapp: \#\# create projectapp
	\$(DOCKER) run -it \
		-e USER=`id -u -n` \
		-e GROUP=`id -g -n` \
		-e UID=`id -u` \
		-e GID=`id -g` \
		-w /home/`id -u -n` \
		-v `pwd`/host:/home/`id -u -n` \
		-v `pwd`/su-exec/:/opt/bin \
		-e ANDROID_ARCH=x86 \
		--name \$(CONTAINER_NAME) --rm \$(MACHINENAME) \
		/opt/bin/entrypoint.sh \
		/opt/android-sdk-linux/tools/android create project \
		--target 1 \
		--name \$(PROJECTNAME)App \
		--path ./\$(PROJECTNAME)AppProject \
		--activity \$(PROJECTNAME)AppActivity \
		--package \$(PROJECTPACKAGE)
	sed "s@sdk\.dir=.*@sdk.dir=\$\${HOME}/Android/Sdk/24.4.1/android-sdk-linux@" -i host/MyAndroidAppProject/local.properties

.PHONY: targets
targets: \#\# list targets
	\$(DOCKER) run -it --rm \$(MACHINENAME) android list target

restart:
	\$(DOCKER) restart \$(CONTAINER_NAME)

.PHONY: clean
clean: stop rm \#\# remove shut down the container and remove

