#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1490984419.718858
__CHEETAH_genTimestamp__ = 'Fri Mar 31 15:20:19 2017'
__CHEETAH_src__ = '../m/knife.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Mar 31 14:48:35 2017'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class knife(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(knife, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''log_level     :''')
        _v = VFFSL(SL,"log.level",True) # u'${log.level}' on line 1, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${log.level}')) # from line 1, col 16.
        write(u'''
log_location  ''')
        _v = VFFSL(SL,"log.location",True) # u'${log.location}' on line 2, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'${log.location}')) # from line 2, col 15.
        write(u"""

node_name '""")
        _v = VFFSL(SL,"chef.node_name",True) # u'${chef.node_name}' on line 4, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${chef.node_name}')) # from line 4, col 12.
        write(u"""'

#ssl_verify_mode       :verify_peer
validation_client_name '""")
        _v = VFFSL(SL,"validation.client_name",True) # u'${validation.client_name}' on line 7, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${validation.client_name}')) # from line 7, col 25.
        write(u"""'
chef_server_url        'https://""")
        _v = VFFSL(SL,"chef.url",True) # u'${chef.url}' on line 8, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'${chef.url}')) # from line 8, col 33.
        write(u''':''')
        _v = VFFSL(SL,"chef.port",True) # u'${chef.port}' on line 8, col 45
        if _v is not None: write(_filter(_v, rawExpr=u'${chef.port}')) # from line 8, col 45.
        write(u"""'
trusted_certs_dir      '""")
        _v = VFFSL(SL,"certs",True) # u'${certs}' on line 9, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${certs}')) # from line 9, col 25.
        write(u"""'
validation_key         '""")
        _v = VFFSL(SL,"etc",True) # u'${etc}' on line 10, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${etc}')) # from line 10, col 25.
        write(u'''/''')
        _v = VFFSL(SL,"validation.client_name",True) # u'${validation.client_name}' on line 10, col 32
        if _v is not None: write(_filter(_v, rawExpr=u'${validation.client_name}')) # from line 10, col 32.
        write(u'''.pem\'

checksum_path "''')
        _v = VFFSL(SL,"var",True) # u'${var}' on line 12, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${var}')) # from line 12, col 16.
        write(u'''/checksums"

cookbook_path [
               \'''')
        _v = VFFSL(SL,"var",True) # u'${var}' on line 15, col 17
        if _v is not None: write(_filter(_v, rawExpr=u'${var}')) # from line 15, col 17.
        write(u"""/cookbooks',
               '""")
        _v = VFFSL(SL,"var",True) # u'${var}' on line 16, col 17
        if _v is not None: write(_filter(_v, rawExpr=u'${var}')) # from line 16, col 17.
        write(u'''/site-cookbooks\'
              ]

#environment "production"
environment_path \'''')
        _v = VFFSL(SL,"var",True) # u'${var}' on line 20, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${var}')) # from line 20, col 19.
        write(u"""/environments'
file_backup_path '""")
        _v = VFFSL(SL,"var",True) # u'${var}' on line 21, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${var}')) # from line 21, col 19.
        write(u"""/backup'
file_cache_path  '""")
        _v = VFFSL(SL,"var",True) # u'${var}' on line 22, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${var}')) # from line 22, col 19.
        write(u"""/cache'
#role_path       '""")
        _v = VFFSL(SL,"var",True) # u'${var}' on line 23, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${var}')) # from line 23, col 19.
        write(u"""/roles'
#json_attribs    '""")
        _v = VFFSL(SL,"var",True) # u'${var}' on line 24, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${var}')) # from line 24, col 19.
        write(u"""/node.json'

syntax_check_cache_path  '/root/.chef/syntax_check_cache'
client_key               '""")
        _v = VFFSL(SL,"etc",True) # u'${etc}' on line 27, col 27
        if _v is not None: write(_filter(_v, rawExpr=u'${etc}')) # from line 27, col 27.
        write(u"""/admin.pem'

data_bag_path                      '""")
        _v = VFFSL(SL,"var",True) # u'${var}' on line 29, col 37
        if _v is not None: write(_filter(_v, rawExpr=u'${var}')) # from line 29, col 37.
        write(u"""/data_bags'
encrypted_data_bag_secret_key_path '""")
        _v = VFFSL(SL,"etc",True) # u'${etc}' on line 30, col 37
        if _v is not None: write(_filter(_v, rawExpr=u'${etc}')) # from line 30, col 37.
        write(u"""/encrypted_data_bag_secret'

cookbook_copyright '42algoritmos, Inc.'
cookbook_license   'apachev2'
cookbook_email     'ivan@42algoritmos.com.br'
""")
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_knife= 'respond'

## END CLASS DEFINITION

if not hasattr(knife, '_initCheetahAttributes'):
    templateAPIClass = getattr(knife, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(knife)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=knife()).run()


