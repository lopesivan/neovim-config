local M = {}

local whichkey = require "which-key"
local legendary = require "legendary"

-- local imap = require("config.keymap").imap
local nmap = require("config.keymap").nmap

local buf_nnoremap = function(opts)
    if opts[3] == nil then
        opts[3] = {}
    end
    opts[3].buffer = 0

    nmap(opts)
end
--[[
local buf_inoremap = function(opts)
    if opts[3] == nil then
        opts[3] = {}
    end
    opts[3].buffer = 0

    imap(opts)
end
]]
-- local keymap = vim.api.nvim_set_keymap
-- local buf_keymap = vim.api.nvim_buf_set_keymap
-- local keymap = vim.keymap.set

local function keymappings(client, bufnr)
    -- Key mappings
    -- buf_keymap(bufnr, "n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)
    -- vim.keymap.set("n", "K", vim.lsp.buf.hover, { buffer = 0 })
    -- local filetype = vim.api.nvim_buf_get_option(bufnr, "filetype")

    vim.keymap.set(
        "n",
        "<a-k>",
        "<CMD>lua vim.lsp.buf.hover()<CR>",
        { buffer = bufnr }
    )

    -- if filetype ~= "lua" then
    -- end

    --[[

    buf_nnoremap { "<space>rn", "<CMD>lua vim.lsp.buf.rename()<CR>", {desc = "Rename"}}
    buf_nnoremap { "gd", "<CMD>lua vim.lsp.buf.definition()<CR>", {desc = "Go definition"}}
    buf_nnoremap {
        "gD",
        "<CMD>lua vim.lsp.buf.declaration()<CR>",
        { desc = "Go declaration" },
    }
    buf_nnoremap {
        "gT",
        "<CMD>lua vim.lsp.buf.type_definition()<CR>",
        { desc = "Go type definition" },
    }
    -- buf_nnoremap {
    --     "gI",
    --     Telescope lsp_implementations,
    --     { desc = "Goto Implementation" },
    -- }

    -- buf_nnoremap { "gI", handlers.implementation, { desc = "Go Implementation" } }
    buf_nnoremap {
        "<space>ca",
        "<CMD>lua vim.lsp.buf.code_action()<CR>",
        { desc = "Code Action" },
    }
    buf_nnoremap {
        "gT",
        "<CMD>lua vim.lsp.buf.type_definition()<CR>",
        { desc = "Go type definition" },
    }
    buf_nnoremap {
        "gh",
        "<CMD>lua vim.lsp.buf.signature_help()<CR>",
        { desc = "Signature Help" },
    }

    -- keymap("n", "gI", handlers.implementation, { desc = "Go Implementation" } )
    buf_nnoremap {
        "]d",
        "<CMD>lua vim.diagnostic.goto_next()<CR>",
        { desc = "Go Next diagnostic" },
    }
    buf_nnoremap {
        "[d",
        "<CMD>lua vim.diagnostic.goto_prev()<CR>",
        { desc = "Go Prev diagnostic" },
    }
    buf_nnoremap {
        "[e",
        "<CMD>lua vim.diagnostic.goto_prev { severity = vim.diagnostic.severity.ERROR }<CR>",
        { desc = "Go Prev Error" },
    }
    buf_nnoremap {
        "]e",
        "<CMD>lua vim.diagnostic.goto_next { severity = vim.diagnostic.severity.ERROR }<CR>",
        { desc = "Go Next Error" },
    }
]]

    -- Whichkey
    local keymap_l = {
        l = {
            name = "LSP",
            R = { "<cmd>Trouble lsp_references<cr>", "Trouble References" },
            a = { "<cmd>lua vim.lsp.buf.code_action()<CR>", "Code Action" },
            d = { "<cmd>Telescope diagnostics<CR>", "Diagnostics" },
            f = { "<cmd>Lspsaga lsp_finder<CR>", "Finder" },
            i = { "<cmd>LspInfo<CR>", "Lsp Info" },
            n = { "<cmd>lua require('renamer').rename()<CR>", "Rename" },
            r = { "<cmd>Telescope lsp_references<CR>", "References" },
            s = {
                "<cmd>Telescope lsp_document_symbols<CR>",
                "Document Symbols",
            },
            t = { "<cmd>TroubleToggle document_diagnostics<CR>", "Trouble" },
            L = {
                "<cmd>lua vim.lsp.codelens.refresh()<CR>",
                "Refresh CodeLens",
            },
            l = { "<cmd>lua vim.lsp.codelens.run()<CR>", "Run CodeLens" },
            D = {
                "<cmd>lua require('config.lsp').toggle_diagnostics()<CR>",
                "Toggle Inline Diagnostics",
            },
        },
    }
    if client.server_capabilities.documentFormattingProvider then
        keymap_l.l.F = {
            "<cmd>lua vim.lsp.buf.format({async = true})<CR>",
            "Format Document",
        }
    end

    local keymap_v_l = {
        l = {
            name = "LSP",
            a = {
                "<cmd>'<,'>lua vim.lsp.buf.range_code_action()<CR>",
                "Code Action",
            },
        },
    }

    local o = { buffer = bufnr, prefix = "<leader>" }
    whichkey.register(keymap_l, o)
    legendary.bind_whichkey(keymap_l, o, false)

    o = { mode = "v", buffer = bufnr, prefix = "<leader>" }
    whichkey.register(keymap_v_l, o)
    legendary.bind_whichkey(keymap_v_l, o, false)

    -- o = { buffer = bufnr, prefix = "g" }
    -- whichkey.register(keymap_g, o)
    -- legendary.bind_whichkey(keymap_g, o, false)
end

-- local function signature_help(client, bufnr)
--   local trigger_chars = client.server_capabilities.signatureHelpProvider.triggerCharacters
--   for _, char in ipairs(trigger_chars) do
--     vim.keymap.set("i", char, function()
--       vim.defer_fn(function()
--         pcall(vim.lsp.buf.signature_help)
--       end, 0)
--       return char
--     end, {
--       buffer = bufnr,
--       noremap = true,
--       silent = true,
--       expr = true,
--     })
--   end
-- end

function M.setup(client, bufnr)
    keymappings(client, bufnr)
    -- signature_help(client, bufnr) -- use cmp-nvim-lsp-signature-help
    print "Load LSP: mappings "
end

return M
