-- RELOAD "config.nvim_dev"

local Job = require "plenary.job"
local plenary_window = require "plenary.window.float"

local nvim_dev = {}

nvim_dev.sh = function(args)
	local float = plenary_window.percentage_range_window(0.9, 0.8)

	local channel = vim.api.nvim_open_term(float.bufnr, {})

	local closing_keys = { "q", "<Esc>", "<CR>" }
	local map_options = {
		noremap = true,
		silent = true,
	}

	for _, key in ipairs(closing_keys) do
		vim.api.nvim_buf_set_keymap(float.bufnr, "n", key, "<CMD>close!<CR>", map_options)
	end

	Job
	:new({
		command = "bash",
		args = args,

		on_stdout = vim.schedule_wrap(function(_, data)
			vim.api.nvim_chan_send(channel, data)
			-- print(data)
		end),

		on_stderr = vim.schedule_wrap(function(_, data)
			for _, win in ipairs(vim.api.nvim_list_wins()) do
				local config = vim.api.nvim_win_get_config(win);
				if config.relative ~= "" then
					vim.api.nvim_win_close(win, false);
					print('Closing window', win)
				end
			end

			vim.api.nvim_err_writeln(data)
			-- print(data)
		end),

		on_exit = vim.schedule_wrap(function(self, code)
			print "Done"
			print("Code", code)
			if code ~= 0 then
				local result = vim.deepcopy(self:result())
				vim.list_extend(result, self:stderr_result())

				P(result)

				vim.fn.setqflist(result, "r")
			end
		end),
	})
	:start()
end

nvim_dev.make = function(args)
	local float = plenary_window.percentage_range_window(0.9, 0.8)
	-- local count = 0

	local channel = vim.api.nvim_open_term(float.bufnr, {})

	local closing_keys = { "q", "<Esc>", "<CR>" }
	local map_options = {
		noremap = true,
		silent = true,
	}

	for _, key in ipairs(closing_keys) do
		vim.api.nvim_buf_set_keymap(float.bufnr, "n", key, "<CMD>close!<CR>", map_options)
	end

	Job
	:new({
		command = "make",
		args = args,

		on_stdout = vim.schedule_wrap(function(_, data)
			vim.api.nvim_chan_send(channel, data)
			-- print(data)
		end),

		on_stderr = vim.schedule_wrap(function(_, data)
			for _, win in ipairs(vim.api.nvim_list_wins()) do
				local config = vim.api.nvim_win_get_config(win);
				if config.relative ~= "" then
					vim.api.nvim_win_close(win, false);
					print('Closing window', win)
				end
			end

			vim.api.nvim_err_writeln(data)
			-- print(data)
		end),

		on_exit = vim.schedule_wrap(function(self, code)
			print "Done"
			print("Code", code)
			if code ~= 0 then
				local result = vim.deepcopy(self:result())
				vim.list_extend(result, self:stderr_result())

				P(result)

				vim.fn.setqflist(result, "r")
			end
		end),
	})
	:start()
end

nvim_dev.run = function(command, args)
	local float = plenary_window.percentage_range_window(0.9, 0.8)

	local channel = vim.api.nvim_open_term(float.bufnr, {})

	local closing_keys = { "q", "<Esc>", "<CR>" }
	local map_options = {
		noremap = true,
		silent = true,
	}

	for _, key in ipairs(closing_keys) do
		vim.api.nvim_buf_set_keymap(float.bufnr, "n", key, "<CMD>close!<CR>", map_options)
	end

	Job
	:new({
		command = string.format("./%s", command),
		args = args,

		on_stdout = vim.schedule_wrap(function(_, data)
			vim.api.nvim_chan_send(channel, data)
			-- print(data)
		end),

		on_stderr = vim.schedule_wrap(function(_, data)
			for _, win in ipairs(vim.api.nvim_list_wins()) do
				local config = vim.api.nvim_win_get_config(win);
				if config.relative ~= "" then
					vim.api.nvim_win_close(win, false);
					print('Closing window', win)
				end
			end

			vim.api.nvim_err_writeln(data)
			-- print(data)
		end),

		on_exit = vim.schedule_wrap(function(self, code)
			print "Done"
			print("Code", code)
			if code ~= 0 then
				local result = vim.deepcopy(self:result())
				vim.list_extend(result, self:stderr_result())

				P(result)

				vim.fn.setqflist(result, "r")
			end
		end),
	})
	:start()
end

nvim_dev.app = function(command, args)
	local float = plenary_window.percentage_range_window(0.9, 0.8)

	local channel = vim.api.nvim_open_term(float.bufnr, {})

	local closing_keys = { "q", "<Esc>", "<CR>" }
	local map_options = {
		noremap = true,
		silent = true,
	}

	for _, key in ipairs(closing_keys) do
		vim.api.nvim_buf_set_keymap(float.bufnr, "n", key, "<CMD>close!<CR>", map_options)
	end

	Job
	:new({
		command = command,
		args = args,

		on_stdout = vim.schedule_wrap(function(_, data)
			vim.api.nvim_chan_send(channel, data)
			-- print(data)
		end),

		on_stderr = vim.schedule_wrap(function(_, data)
			--[[ for _, win in ipairs(vim.api.nvim_list_wins()) do
				local config = vim.api.nvim_win_get_config(win);
				if config.relative ~= "" then
					vim.api.nvim_win_close(win, false);
					print('Closing window', win)
				end
			end
            ]]
			-- vim.api.nvim_err_writeln(data)
			print(data)
		end),

		on_exit = vim.schedule_wrap(function(self, code)
			print "Done"
			print("Code", code)
			if code ~= 0 then
				local result = vim.deepcopy(self:result())
				vim.list_extend(result, self:stderr_result())

				P(result)

				vim.fn.setqflist(result, "r")
			end
		end),
	})
	:start()
end

-- local nmap = require("config.keymap").nmap
-- nmap { '<F5>', "<CMD>lua require('config.nvim_dev').sh(vim.fn.expand("%"))<CR>", {desc="make"}}
-- OK
-- nmap { '<F5>', "<CMD>lua require('config.nvim_dev').make({})<CR>", {desc="make"}}
-- nmap { '<F6>', "<CMD>lua require('config.nvim_dev').make({'clean'})<CR>", {desc="make clean"}}
-- nmap { '<F7>', "<CMD>lua require('config.nvim_dev').run('hello',{})<CR>", {desc="run"}}
-- ERROR
-- nmap { '<F8>', "<CMD>lua require('config.nvim_dev').app('ls',{'-l'})<CR>", {desc="app"}}

return nvim_dev
